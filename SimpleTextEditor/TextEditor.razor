@using System.Text.RegularExpressions;
@using System.Text.Json;
@using SimpleTextEditor.Enums;
@using SimpleTextEditor.Models;

<button class="@(bold ? "format-button-selected" : "")" @onclick="@(() => FormatItem(CharacterFormatEnum.B))">B</button>
<button class="@(italic ? "format-button-selected" : "")" @onclick="@(() => FormatItem(CharacterFormatEnum.I))"><i>I</i></button>
<button class="@(underline ? "format-button-selected" : "")" @onclick="@(() => FormatItem(CharacterFormatEnum.U))"><u>U</u></button>
<button class="@(Blocks[_cursorSelectionState.CursorBlock].BlockType == BlockTypeEnum.H1 ? "format-button-selected" : "")" @onclick="@(() => SetBlockType(BlockTypeEnum.H1))">H1</button>
<button class="@(Blocks[_cursorSelectionState.CursorBlock].BlockType == BlockTypeEnum.H2 ? "format-button-selected" : "")" @onclick="@(() => SetBlockType(BlockTypeEnum.H2))">H2</button>
<button class="@(Blocks[_cursorSelectionState.CursorBlock].BlockType == BlockTypeEnum.P ? "format-button-selected" : "")" @onclick="@(() => SetBlockType(BlockTypeEnum.P))">P</button>
<div contenteditable="true" tabindex="0" @onkeydown="KeyDown" @onkeydown:preventDefault="true" @ref="inputBoxRef" class="rich-text-editor-container" @onmousedown:preventDefault @onmouseup="SelectionEnd" @onpointerleave="SelectionEnd" @onmouseup:preventDefault="true" @onblur="LostFocus">
	@{
		_blockIndex = 0;
		int blockCount = Blocks.Count();
	}
	@foreach (var block in Blocks)
	{
		int b = _blockIndex;
		int charCount = block.Characters.Count();
		<div @onmouseup="() => FocusAndSetCursorPos(b, charCount - 1)" @onmouseup:stopPropagation="true" @onmouseup:preventDefault="true" class="text-line">
			<DynamicHtmlTag HtmlTag="block.BlockType">
				@if (_focused && b == _cursorSelectionState.CursorBlock && _cursorSelectionState.CursorChar == -1)
				{
					<div class="text-cursor"></div>
				}
				@{
					int characterIndex = 0;
				}
				@foreach (var character in block.Characters)
				{
					int i = characterIndex;

					<span class="text-cursor-shift @(_cursorSelectionState.IsSelected(b, i) ? "selection-highlight" : "")" @onmousedown="() => SelectionStart(b, i-1)" @onmouseenter="() => SelectionAdd(b, i-1)" @onmouseup="SelectionEnd" @onmouseup:stopPropagation="true" @onmousedown:preventDefault="true" @onmouseup:preventDefault="true">
						@switch (Blocks[b].Characters[i].Format)
						{
							case CharacterFormatEnum.None:
								@character.Content
								break;
							case CharacterFormatEnum.I:
								<i>@character.Content</i>
								break;
							case CharacterFormatEnum.B:
								<b>@character.Content</b>
								break;
							case CharacterFormatEnum.U:
								<u>@character.Content</u>
								break;
							case CharacterFormatEnum.I | CharacterFormatEnum.U:
								<i><u>@character.Content</u></i>
								break;
							case CharacterFormatEnum.B | CharacterFormatEnum.U:
								<b><u>@character.Content</u></b>
								break;
							case CharacterFormatEnum.I | CharacterFormatEnum.B:
								<i><b>@character.Content</b></i>
								break;
							case CharacterFormatEnum.I | CharacterFormatEnum.B | CharacterFormatEnum.U:
								<i><b><u>@character.Content</u></b></i>
								break;
						}
					</span>
					if (_focused && b == _cursorSelectionState.CursorBlock && i == _cursorSelectionState.CursorChar)
					{
						<div class="text-cursor"></div>
					}
					characterIndex++;
				}
				<span class="text-cursor-shift @(_cursorSelectionState.IsSelected(b, Blocks[b].Characters.Count() - 1) ? "selection-highlight" : "")" @onmousedown="() => SelectionStart(b, Blocks[b].Characters.Count() - 1)" @onmouseenter="() => SelectionAdd(b, Blocks[b].Characters.Count() - 1)" @onmouseup="SelectionEnd" @onmouseup:stopPropagation="true" @onmousedown:preventDefault="true" @onmouseup:preventDefault="true">&nbsp;</span>
			</DynamicHtmlTag>
		</div>
		@if (b < blockCount - 1)
		{
			_blockIndex++;
		}
	}
</div>
@if(longPressed){
	<div>
		LONGPRESSED!
	</div>
}
